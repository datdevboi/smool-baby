// Code generated by Prisma (prisma@1.30.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  baby: (where?: BabyWhereInput) => Promise<boolean>;
  bath: (where?: BathWhereInput) => Promise<boolean>;
  diaper: (where?: DiaperWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  baby: (where: BabyWhereUniqueInput) => BabyPromise;
  babies: (
    args?: {
      where?: BabyWhereInput;
      orderBy?: BabyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Baby>;
  babiesConnection: (
    args?: {
      where?: BabyWhereInput;
      orderBy?: BabyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => BabyConnectionPromise;
  baths: (
    args?: {
      where?: BathWhereInput;
      orderBy?: BathOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Bath>;
  bathsConnection: (
    args?: {
      where?: BathWhereInput;
      orderBy?: BathOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => BathConnectionPromise;
  diaper: (where: DiaperWhereUniqueInput) => DiaperPromise;
  diapers: (
    args?: {
      where?: DiaperWhereInput;
      orderBy?: DiaperOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Diaper>;
  diapersConnection: (
    args?: {
      where?: DiaperWhereInput;
      orderBy?: DiaperOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DiaperConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBaby: (data: BabyCreateInput) => BabyPromise;
  updateBaby: (
    args: { data: BabyUpdateInput; where: BabyWhereUniqueInput }
  ) => BabyPromise;
  updateManyBabies: (
    args: { data: BabyUpdateManyMutationInput; where?: BabyWhereInput }
  ) => BatchPayloadPromise;
  upsertBaby: (
    args: {
      where: BabyWhereUniqueInput;
      create: BabyCreateInput;
      update: BabyUpdateInput;
    }
  ) => BabyPromise;
  deleteBaby: (where: BabyWhereUniqueInput) => BabyPromise;
  deleteManyBabies: (where?: BabyWhereInput) => BatchPayloadPromise;
  createBath: (data: BathCreateInput) => BathPromise;
  updateManyBaths: (
    args: { data: BathUpdateManyMutationInput; where?: BathWhereInput }
  ) => BatchPayloadPromise;
  deleteManyBaths: (where?: BathWhereInput) => BatchPayloadPromise;
  createDiaper: (data: DiaperCreateInput) => DiaperPromise;
  updateDiaper: (
    args: { data: DiaperUpdateInput; where: DiaperWhereUniqueInput }
  ) => DiaperPromise;
  updateManyDiapers: (
    args: { data: DiaperUpdateManyMutationInput; where?: DiaperWhereInput }
  ) => BatchPayloadPromise;
  upsertDiaper: (
    args: {
      where: DiaperWhereUniqueInput;
      create: DiaperCreateInput;
      update: DiaperUpdateInput;
    }
  ) => DiaperPromise;
  deleteDiaper: (where: DiaperWhereUniqueInput) => DiaperPromise;
  deleteManyDiapers: (where?: DiaperWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  baby: (
    where?: BabySubscriptionWhereInput
  ) => BabySubscriptionPayloadSubscription;
  bath: (
    where?: BathSubscriptionWhereInput
  ) => BathSubscriptionPayloadSubscription;
  diaper: (
    where?: DiaperSubscriptionWhereInput
  ) => DiaperSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type GenderEnum = "Male" | "Female";

export type DiaperType = "Mixed" | "Pee" | "Poop";

export type BabyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "dob_ASC"
  | "dob_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "pictureUrl_ASC"
  | "pictureUrl_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type DiaperOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "time_ASC"
  | "time_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type BathOrderByInput =
  | "time_ASC"
  | "time_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type BabyWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface BabyWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  dob?: DateTimeInput;
  dob_not?: DateTimeInput;
  dob_in?: DateTimeInput[] | DateTimeInput;
  dob_not_in?: DateTimeInput[] | DateTimeInput;
  dob_lt?: DateTimeInput;
  dob_lte?: DateTimeInput;
  dob_gt?: DateTimeInput;
  dob_gte?: DateTimeInput;
  gender?: GenderEnum;
  gender_not?: GenderEnum;
  gender_in?: GenderEnum[] | GenderEnum;
  gender_not_in?: GenderEnum[] | GenderEnum;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  parent?: UserWhereInput;
  pictureUrl?: String;
  pictureUrl_not?: String;
  pictureUrl_in?: String[] | String;
  pictureUrl_not_in?: String[] | String;
  pictureUrl_lt?: String;
  pictureUrl_lte?: String;
  pictureUrl_gt?: String;
  pictureUrl_gte?: String;
  pictureUrl_contains?: String;
  pictureUrl_not_contains?: String;
  pictureUrl_starts_with?: String;
  pictureUrl_not_starts_with?: String;
  pictureUrl_ends_with?: String;
  pictureUrl_not_ends_with?: String;
  diapers_every?: DiaperWhereInput;
  diapers_some?: DiaperWhereInput;
  diapers_none?: DiaperWhereInput;
  baths_every?: BathWhereInput;
  baths_some?: BathWhereInput;
  baths_none?: BathWhereInput;
  AND?: BabyWhereInput[] | BabyWhereInput;
  OR?: BabyWhereInput[] | BabyWhereInput;
  NOT?: BabyWhereInput[] | BabyWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  babies_every?: BabyWhereInput;
  babies_some?: BabyWhereInput;
  babies_none?: BabyWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface DiaperWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: DiaperType;
  type_not?: DiaperType;
  type_in?: DiaperType[] | DiaperType;
  type_not_in?: DiaperType[] | DiaperType;
  time?: DateTimeInput;
  time_not?: DateTimeInput;
  time_in?: DateTimeInput[] | DateTimeInput;
  time_not_in?: DateTimeInput[] | DateTimeInput;
  time_lt?: DateTimeInput;
  time_lte?: DateTimeInput;
  time_gt?: DateTimeInput;
  time_gte?: DateTimeInput;
  baby?: BabyWhereInput;
  AND?: DiaperWhereInput[] | DiaperWhereInput;
  OR?: DiaperWhereInput[] | DiaperWhereInput;
  NOT?: DiaperWhereInput[] | DiaperWhereInput;
}

export interface BathWhereInput {
  time?: DateTimeInput;
  time_not?: DateTimeInput;
  time_in?: DateTimeInput[] | DateTimeInput;
  time_not_in?: DateTimeInput[] | DateTimeInput;
  time_lt?: DateTimeInput;
  time_lte?: DateTimeInput;
  time_gt?: DateTimeInput;
  time_gte?: DateTimeInput;
  baby?: BabyWhereInput;
  AND?: BathWhereInput[] | BathWhereInput;
  OR?: BathWhereInput[] | BathWhereInput;
  NOT?: BathWhereInput[] | BathWhereInput;
}

export type DiaperWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface BabyCreateInput {
  name: String;
  dob: DateTimeInput;
  gender?: GenderEnum;
  parent: UserCreateOneWithoutBabiesInput;
  pictureUrl?: String;
  diapers?: DiaperCreateManyWithoutBabyInput;
  baths?: BathCreateManyWithoutBabyInput;
}

export interface UserCreateOneWithoutBabiesInput {
  create?: UserCreateWithoutBabiesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutBabiesInput {
  email: String;
  password: String;
}

export interface DiaperCreateManyWithoutBabyInput {
  create?: DiaperCreateWithoutBabyInput[] | DiaperCreateWithoutBabyInput;
  connect?: DiaperWhereUniqueInput[] | DiaperWhereUniqueInput;
}

export interface DiaperCreateWithoutBabyInput {
  type: DiaperType;
  time: DateTimeInput;
}

export interface BathCreateManyWithoutBabyInput {
  create?: BathCreateWithoutBabyInput[] | BathCreateWithoutBabyInput;
}

export interface BathCreateWithoutBabyInput {
  time: DateTimeInput;
}

export interface BabyUpdateInput {
  name?: String;
  dob?: DateTimeInput;
  gender?: GenderEnum;
  parent?: UserUpdateOneRequiredWithoutBabiesInput;
  pictureUrl?: String;
  diapers?: DiaperUpdateManyWithoutBabyInput;
  baths?: BathUpdateManyWithoutBabyInput;
}

export interface UserUpdateOneRequiredWithoutBabiesInput {
  create?: UserCreateWithoutBabiesInput;
  update?: UserUpdateWithoutBabiesDataInput;
  upsert?: UserUpsertWithoutBabiesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutBabiesDataInput {
  email?: String;
  password?: String;
}

export interface UserUpsertWithoutBabiesInput {
  update: UserUpdateWithoutBabiesDataInput;
  create: UserCreateWithoutBabiesInput;
}

export interface DiaperUpdateManyWithoutBabyInput {
  create?: DiaperCreateWithoutBabyInput[] | DiaperCreateWithoutBabyInput;
  delete?: DiaperWhereUniqueInput[] | DiaperWhereUniqueInput;
  connect?: DiaperWhereUniqueInput[] | DiaperWhereUniqueInput;
  set?: DiaperWhereUniqueInput[] | DiaperWhereUniqueInput;
  disconnect?: DiaperWhereUniqueInput[] | DiaperWhereUniqueInput;
  update?:
    | DiaperUpdateWithWhereUniqueWithoutBabyInput[]
    | DiaperUpdateWithWhereUniqueWithoutBabyInput;
  upsert?:
    | DiaperUpsertWithWhereUniqueWithoutBabyInput[]
    | DiaperUpsertWithWhereUniqueWithoutBabyInput;
  deleteMany?: DiaperScalarWhereInput[] | DiaperScalarWhereInput;
  updateMany?:
    | DiaperUpdateManyWithWhereNestedInput[]
    | DiaperUpdateManyWithWhereNestedInput;
}

export interface DiaperUpdateWithWhereUniqueWithoutBabyInput {
  where: DiaperWhereUniqueInput;
  data: DiaperUpdateWithoutBabyDataInput;
}

export interface DiaperUpdateWithoutBabyDataInput {
  type?: DiaperType;
  time?: DateTimeInput;
}

export interface DiaperUpsertWithWhereUniqueWithoutBabyInput {
  where: DiaperWhereUniqueInput;
  update: DiaperUpdateWithoutBabyDataInput;
  create: DiaperCreateWithoutBabyInput;
}

export interface DiaperScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: DiaperType;
  type_not?: DiaperType;
  type_in?: DiaperType[] | DiaperType;
  type_not_in?: DiaperType[] | DiaperType;
  time?: DateTimeInput;
  time_not?: DateTimeInput;
  time_in?: DateTimeInput[] | DateTimeInput;
  time_not_in?: DateTimeInput[] | DateTimeInput;
  time_lt?: DateTimeInput;
  time_lte?: DateTimeInput;
  time_gt?: DateTimeInput;
  time_gte?: DateTimeInput;
  AND?: DiaperScalarWhereInput[] | DiaperScalarWhereInput;
  OR?: DiaperScalarWhereInput[] | DiaperScalarWhereInput;
  NOT?: DiaperScalarWhereInput[] | DiaperScalarWhereInput;
}

export interface DiaperUpdateManyWithWhereNestedInput {
  where: DiaperScalarWhereInput;
  data: DiaperUpdateManyDataInput;
}

export interface DiaperUpdateManyDataInput {
  type?: DiaperType;
  time?: DateTimeInput;
}

export interface BathUpdateManyWithoutBabyInput {
  create?: BathCreateWithoutBabyInput[] | BathCreateWithoutBabyInput;
  deleteMany?: BathScalarWhereInput[] | BathScalarWhereInput;
  updateMany?:
    | BathUpdateManyWithWhereNestedInput[]
    | BathUpdateManyWithWhereNestedInput;
}

export interface BathScalarWhereInput {
  time?: DateTimeInput;
  time_not?: DateTimeInput;
  time_in?: DateTimeInput[] | DateTimeInput;
  time_not_in?: DateTimeInput[] | DateTimeInput;
  time_lt?: DateTimeInput;
  time_lte?: DateTimeInput;
  time_gt?: DateTimeInput;
  time_gte?: DateTimeInput;
  AND?: BathScalarWhereInput[] | BathScalarWhereInput;
  OR?: BathScalarWhereInput[] | BathScalarWhereInput;
  NOT?: BathScalarWhereInput[] | BathScalarWhereInput;
}

export interface BathUpdateManyWithWhereNestedInput {
  where: BathScalarWhereInput;
  data: BathUpdateManyDataInput;
}

export interface BathUpdateManyDataInput {
  time?: DateTimeInput;
}

export interface BabyUpdateManyMutationInput {
  name?: String;
  dob?: DateTimeInput;
  gender?: GenderEnum;
  pictureUrl?: String;
}

export interface BathCreateInput {
  time: DateTimeInput;
  baby: BabyCreateOneWithoutBathsInput;
}

export interface BabyCreateOneWithoutBathsInput {
  create?: BabyCreateWithoutBathsInput;
  connect?: BabyWhereUniqueInput;
}

export interface BabyCreateWithoutBathsInput {
  name: String;
  dob: DateTimeInput;
  gender?: GenderEnum;
  parent: UserCreateOneWithoutBabiesInput;
  pictureUrl?: String;
  diapers?: DiaperCreateManyWithoutBabyInput;
}

export interface BathUpdateManyMutationInput {
  time?: DateTimeInput;
}

export interface DiaperCreateInput {
  type: DiaperType;
  time: DateTimeInput;
  baby: BabyCreateOneWithoutDiapersInput;
}

export interface BabyCreateOneWithoutDiapersInput {
  create?: BabyCreateWithoutDiapersInput;
  connect?: BabyWhereUniqueInput;
}

export interface BabyCreateWithoutDiapersInput {
  name: String;
  dob: DateTimeInput;
  gender?: GenderEnum;
  parent: UserCreateOneWithoutBabiesInput;
  pictureUrl?: String;
  baths?: BathCreateManyWithoutBabyInput;
}

export interface DiaperUpdateInput {
  type?: DiaperType;
  time?: DateTimeInput;
  baby?: BabyUpdateOneRequiredWithoutDiapersInput;
}

export interface BabyUpdateOneRequiredWithoutDiapersInput {
  create?: BabyCreateWithoutDiapersInput;
  update?: BabyUpdateWithoutDiapersDataInput;
  upsert?: BabyUpsertWithoutDiapersInput;
  connect?: BabyWhereUniqueInput;
}

export interface BabyUpdateWithoutDiapersDataInput {
  name?: String;
  dob?: DateTimeInput;
  gender?: GenderEnum;
  parent?: UserUpdateOneRequiredWithoutBabiesInput;
  pictureUrl?: String;
  baths?: BathUpdateManyWithoutBabyInput;
}

export interface BabyUpsertWithoutDiapersInput {
  update: BabyUpdateWithoutDiapersDataInput;
  create: BabyCreateWithoutDiapersInput;
}

export interface DiaperUpdateManyMutationInput {
  type?: DiaperType;
  time?: DateTimeInput;
}

export interface UserCreateInput {
  email: String;
  password: String;
  babies?: BabyCreateManyWithoutParentInput;
}

export interface BabyCreateManyWithoutParentInput {
  create?: BabyCreateWithoutParentInput[] | BabyCreateWithoutParentInput;
  connect?: BabyWhereUniqueInput[] | BabyWhereUniqueInput;
}

export interface BabyCreateWithoutParentInput {
  name: String;
  dob: DateTimeInput;
  gender?: GenderEnum;
  pictureUrl?: String;
  diapers?: DiaperCreateManyWithoutBabyInput;
  baths?: BathCreateManyWithoutBabyInput;
}

export interface UserUpdateInput {
  email?: String;
  password?: String;
  babies?: BabyUpdateManyWithoutParentInput;
}

export interface BabyUpdateManyWithoutParentInput {
  create?: BabyCreateWithoutParentInput[] | BabyCreateWithoutParentInput;
  delete?: BabyWhereUniqueInput[] | BabyWhereUniqueInput;
  connect?: BabyWhereUniqueInput[] | BabyWhereUniqueInput;
  set?: BabyWhereUniqueInput[] | BabyWhereUniqueInput;
  disconnect?: BabyWhereUniqueInput[] | BabyWhereUniqueInput;
  update?:
    | BabyUpdateWithWhereUniqueWithoutParentInput[]
    | BabyUpdateWithWhereUniqueWithoutParentInput;
  upsert?:
    | BabyUpsertWithWhereUniqueWithoutParentInput[]
    | BabyUpsertWithWhereUniqueWithoutParentInput;
  deleteMany?: BabyScalarWhereInput[] | BabyScalarWhereInput;
  updateMany?:
    | BabyUpdateManyWithWhereNestedInput[]
    | BabyUpdateManyWithWhereNestedInput;
}

export interface BabyUpdateWithWhereUniqueWithoutParentInput {
  where: BabyWhereUniqueInput;
  data: BabyUpdateWithoutParentDataInput;
}

export interface BabyUpdateWithoutParentDataInput {
  name?: String;
  dob?: DateTimeInput;
  gender?: GenderEnum;
  pictureUrl?: String;
  diapers?: DiaperUpdateManyWithoutBabyInput;
  baths?: BathUpdateManyWithoutBabyInput;
}

export interface BabyUpsertWithWhereUniqueWithoutParentInput {
  where: BabyWhereUniqueInput;
  update: BabyUpdateWithoutParentDataInput;
  create: BabyCreateWithoutParentInput;
}

export interface BabyScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  dob?: DateTimeInput;
  dob_not?: DateTimeInput;
  dob_in?: DateTimeInput[] | DateTimeInput;
  dob_not_in?: DateTimeInput[] | DateTimeInput;
  dob_lt?: DateTimeInput;
  dob_lte?: DateTimeInput;
  dob_gt?: DateTimeInput;
  dob_gte?: DateTimeInput;
  gender?: GenderEnum;
  gender_not?: GenderEnum;
  gender_in?: GenderEnum[] | GenderEnum;
  gender_not_in?: GenderEnum[] | GenderEnum;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  pictureUrl?: String;
  pictureUrl_not?: String;
  pictureUrl_in?: String[] | String;
  pictureUrl_not_in?: String[] | String;
  pictureUrl_lt?: String;
  pictureUrl_lte?: String;
  pictureUrl_gt?: String;
  pictureUrl_gte?: String;
  pictureUrl_contains?: String;
  pictureUrl_not_contains?: String;
  pictureUrl_starts_with?: String;
  pictureUrl_not_starts_with?: String;
  pictureUrl_ends_with?: String;
  pictureUrl_not_ends_with?: String;
  AND?: BabyScalarWhereInput[] | BabyScalarWhereInput;
  OR?: BabyScalarWhereInput[] | BabyScalarWhereInput;
  NOT?: BabyScalarWhereInput[] | BabyScalarWhereInput;
}

export interface BabyUpdateManyWithWhereNestedInput {
  where: BabyScalarWhereInput;
  data: BabyUpdateManyDataInput;
}

export interface BabyUpdateManyDataInput {
  name?: String;
  dob?: DateTimeInput;
  gender?: GenderEnum;
  pictureUrl?: String;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  password?: String;
}

export interface BabySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: BabyWhereInput;
  AND?: BabySubscriptionWhereInput[] | BabySubscriptionWhereInput;
  OR?: BabySubscriptionWhereInput[] | BabySubscriptionWhereInput;
  NOT?: BabySubscriptionWhereInput[] | BabySubscriptionWhereInput;
}

export interface BathSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: BathWhereInput;
  AND?: BathSubscriptionWhereInput[] | BathSubscriptionWhereInput;
  OR?: BathSubscriptionWhereInput[] | BathSubscriptionWhereInput;
  NOT?: BathSubscriptionWhereInput[] | BathSubscriptionWhereInput;
}

export interface DiaperSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DiaperWhereInput;
  AND?: DiaperSubscriptionWhereInput[] | DiaperSubscriptionWhereInput;
  OR?: DiaperSubscriptionWhereInput[] | DiaperSubscriptionWhereInput;
  NOT?: DiaperSubscriptionWhereInput[] | DiaperSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Baby {
  id: ID_Output;
  name: String;
  dob: DateTimeOutput;
  gender?: GenderEnum;
  updatedAt: DateTimeOutput;
  pictureUrl?: String;
}

export interface BabyPromise extends Promise<Baby>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  dob: () => Promise<DateTimeOutput>;
  gender: () => Promise<GenderEnum>;
  updatedAt: () => Promise<DateTimeOutput>;
  parent: <T = UserPromise>() => T;
  pictureUrl: () => Promise<String>;
  diapers: <T = FragmentableArray<Diaper>>(
    args?: {
      where?: DiaperWhereInput;
      orderBy?: DiaperOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  baths: <T = FragmentableArray<Bath>>(
    args?: {
      where?: BathWhereInput;
      orderBy?: BathOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface BabySubscription
  extends Promise<AsyncIterator<Baby>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  dob: () => Promise<AsyncIterator<DateTimeOutput>>;
  gender: () => Promise<AsyncIterator<GenderEnum>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  parent: <T = UserSubscription>() => T;
  pictureUrl: () => Promise<AsyncIterator<String>>;
  diapers: <T = Promise<AsyncIterator<DiaperSubscription>>>(
    args?: {
      where?: DiaperWhereInput;
      orderBy?: DiaperOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  baths: <T = Promise<AsyncIterator<BathSubscription>>>(
    args?: {
      where?: BathWhereInput;
      orderBy?: BathOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  babies: <T = FragmentableArray<Baby>>(
    args?: {
      where?: BabyWhereInput;
      orderBy?: BabyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  babies: <T = Promise<AsyncIterator<BabySubscription>>>(
    args?: {
      where?: BabyWhereInput;
      orderBy?: BabyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Diaper {
  id: ID_Output;
  type: DiaperType;
  time: DateTimeOutput;
}

export interface DiaperPromise extends Promise<Diaper>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<DiaperType>;
  time: () => Promise<DateTimeOutput>;
  baby: <T = BabyPromise>() => T;
}

export interface DiaperSubscription
  extends Promise<AsyncIterator<Diaper>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<DiaperType>>;
  time: () => Promise<AsyncIterator<DateTimeOutput>>;
  baby: <T = BabySubscription>() => T;
}

export interface Bath {
  time: DateTimeOutput;
}

export interface BathPromise extends Promise<Bath>, Fragmentable {
  time: () => Promise<DateTimeOutput>;
  baby: <T = BabyPromise>() => T;
}

export interface BathSubscription
  extends Promise<AsyncIterator<Bath>>,
    Fragmentable {
  time: () => Promise<AsyncIterator<DateTimeOutput>>;
  baby: <T = BabySubscription>() => T;
}

export interface BabyConnection {
  pageInfo: PageInfo;
  edges: BabyEdge[];
}

export interface BabyConnectionPromise
  extends Promise<BabyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BabyEdge>>() => T;
  aggregate: <T = AggregateBabyPromise>() => T;
}

export interface BabyConnectionSubscription
  extends Promise<AsyncIterator<BabyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BabyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBabySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BabyEdge {
  node: Baby;
  cursor: String;
}

export interface BabyEdgePromise extends Promise<BabyEdge>, Fragmentable {
  node: <T = BabyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BabyEdgeSubscription
  extends Promise<AsyncIterator<BabyEdge>>,
    Fragmentable {
  node: <T = BabySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBaby {
  count: Int;
}

export interface AggregateBabyPromise
  extends Promise<AggregateBaby>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBabySubscription
  extends Promise<AsyncIterator<AggregateBaby>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BathConnection {
  pageInfo: PageInfo;
  edges: BathEdge[];
}

export interface BathConnectionPromise
  extends Promise<BathConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BathEdge>>() => T;
  aggregate: <T = AggregateBathPromise>() => T;
}

export interface BathConnectionSubscription
  extends Promise<AsyncIterator<BathConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BathEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBathSubscription>() => T;
}

export interface BathEdge {
  node: Bath;
  cursor: String;
}

export interface BathEdgePromise extends Promise<BathEdge>, Fragmentable {
  node: <T = BathPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BathEdgeSubscription
  extends Promise<AsyncIterator<BathEdge>>,
    Fragmentable {
  node: <T = BathSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBath {
  count: Int;
}

export interface AggregateBathPromise
  extends Promise<AggregateBath>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBathSubscription
  extends Promise<AsyncIterator<AggregateBath>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DiaperConnection {
  pageInfo: PageInfo;
  edges: DiaperEdge[];
}

export interface DiaperConnectionPromise
  extends Promise<DiaperConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DiaperEdge>>() => T;
  aggregate: <T = AggregateDiaperPromise>() => T;
}

export interface DiaperConnectionSubscription
  extends Promise<AsyncIterator<DiaperConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DiaperEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDiaperSubscription>() => T;
}

export interface DiaperEdge {
  node: Diaper;
  cursor: String;
}

export interface DiaperEdgePromise extends Promise<DiaperEdge>, Fragmentable {
  node: <T = DiaperPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DiaperEdgeSubscription
  extends Promise<AsyncIterator<DiaperEdge>>,
    Fragmentable {
  node: <T = DiaperSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDiaper {
  count: Int;
}

export interface AggregateDiaperPromise
  extends Promise<AggregateDiaper>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDiaperSubscription
  extends Promise<AsyncIterator<AggregateDiaper>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BabySubscriptionPayload {
  mutation: MutationType;
  node: Baby;
  updatedFields: String[];
  previousValues: BabyPreviousValues;
}

export interface BabySubscriptionPayloadPromise
  extends Promise<BabySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BabyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BabyPreviousValuesPromise>() => T;
}

export interface BabySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BabySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BabySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BabyPreviousValuesSubscription>() => T;
}

export interface BabyPreviousValues {
  id: ID_Output;
  name: String;
  dob: DateTimeOutput;
  gender?: GenderEnum;
  updatedAt: DateTimeOutput;
  pictureUrl?: String;
}

export interface BabyPreviousValuesPromise
  extends Promise<BabyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  dob: () => Promise<DateTimeOutput>;
  gender: () => Promise<GenderEnum>;
  updatedAt: () => Promise<DateTimeOutput>;
  pictureUrl: () => Promise<String>;
}

export interface BabyPreviousValuesSubscription
  extends Promise<AsyncIterator<BabyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  dob: () => Promise<AsyncIterator<DateTimeOutput>>;
  gender: () => Promise<AsyncIterator<GenderEnum>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  pictureUrl: () => Promise<AsyncIterator<String>>;
}

export interface BathSubscriptionPayload {
  mutation: MutationType;
  node: Bath;
  updatedFields: String[];
  previousValues: BathPreviousValues;
}

export interface BathSubscriptionPayloadPromise
  extends Promise<BathSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BathPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BathPreviousValuesPromise>() => T;
}

export interface BathSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BathSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BathSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BathPreviousValuesSubscription>() => T;
}

export interface BathPreviousValues {
  time: DateTimeOutput;
}

export interface BathPreviousValuesPromise
  extends Promise<BathPreviousValues>,
    Fragmentable {
  time: () => Promise<DateTimeOutput>;
}

export interface BathPreviousValuesSubscription
  extends Promise<AsyncIterator<BathPreviousValues>>,
    Fragmentable {
  time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DiaperSubscriptionPayload {
  mutation: MutationType;
  node: Diaper;
  updatedFields: String[];
  previousValues: DiaperPreviousValues;
}

export interface DiaperSubscriptionPayloadPromise
  extends Promise<DiaperSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DiaperPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DiaperPreviousValuesPromise>() => T;
}

export interface DiaperSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DiaperSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DiaperSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DiaperPreviousValuesSubscription>() => T;
}

export interface DiaperPreviousValues {
  id: ID_Output;
  type: DiaperType;
  time: DateTimeOutput;
}

export interface DiaperPreviousValuesPromise
  extends Promise<DiaperPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<DiaperType>;
  time: () => Promise<DateTimeOutput>;
}

export interface DiaperPreviousValuesSubscription
  extends Promise<AsyncIterator<DiaperPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<DiaperType>>;
  time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "DiaperType",
    embedded: false
  },
  {
    name: "Diaper",
    embedded: false
  },
  {
    name: "Bath",
    embedded: false
  },
  {
    name: "GenderEnum",
    embedded: false
  },
  {
    name: "Baby",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
